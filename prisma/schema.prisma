// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // engineType = "library"
  // previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Screener {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  name              String          @unique // unique because we will use the name in routing on the FE
  disorder          String
  fullName          String
  displayName       String
  screenerSections   ScreenerSection[]
}

model ScreenerSection {
  id            String             @id @default(uuid())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  type          String
  title         String
  answers       Json
  questions     QuestionsOnScreenerSections[]
  responses     ScreenerResponse[] // TODO: do we ever need to get all responses for a screenerSection?
  Screener      Screener @relation(fields: [screenerId], references: [id], onDelete: Cascade)
  screenerId    String
}

model Question {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  title             String
  domain            Domain          @relation(fields: [domainId], references: [id])
  domainId          String
  screenerSections  QuestionsOnScreenerSections[]
}

model QuestionsOnScreenerSections {
  id                String          @id @default(uuid())
  assignedAt        DateTime        @default(now())
  question          Question        @relation(fields: [questionId], references: [id])
  questionId        String
  screenerSection   ScreenerSection @relation(fields: [screenerSectionId], references: [id])
  screenerSectionId String
}

model ScreenerResponse {
  id                String          @id @default(uuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  screenerSection   ScreenerSection @relation(fields: [screenerSectionId], references: [id])
  screenerSectionId String
  answers           Answer[]
}

model Answer {
  id                 String           @id @default(uuid())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  questionId         String
  value              Int
  screenerResponse   ScreenerResponse @relation(fields: [screenerResponseId], references: [id])
  screenerResponseId String
}

model Domain {
  id               String     @id @default(uuid())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  name             String
  scoringThreshold Int
  scoringOperator  String
  level2Assessment String
  questions        Question[]
}
